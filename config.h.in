/** \file config.h
    \brief Defines Test MUJIN Controller Client installation-specific information.
*/
#ifndef TESTMUJINCLIENT_DEFINITIONS_H
#define TESTMUJINCLIENT_DEFINITIONS_H

#if defined(_WIN32) || defined(__CYGWIN__) || defined(_MSC_VER)
  #define TESTMUJINCLIENT_HELPER_DLL_IMPORT __declspec(dllimport)
  #define TESTMUJINCLIENT_HELPER_DLL_EXPORT __declspec(dllexport)
  #define TESTMUJINCLIENT_HELPER_DLL_LOCAL
#else
  #if __GNUC__ >= 4
    #define TESTMUJINCLIENT_HELPER_DLL_IMPORT __attribute__ ((visibility("default")))
    #define TESTMUJINCLIENT_HELPER_DLL_EXPORT __attribute__ ((visibility("default")))
    #define TESTMUJINCLIENT_HELPER_DLL_LOCAL  __attribute__ ((visibility("hidden")))
  #else
    #define TESTMUJINCLIENT_HELPER_DLL_IMPORT
    #define TESTMUJINCLIENT_HELPER_DLL_EXPORT
    #define TESTMUJINCLIENT_HELPER_DLL_LOCAL
  #endif
#endif

// Now we use the generic helper definitions above to define TESTMUJINCLIENT_API and TESTMUJINCLIENT_LOCAL.
// TESTMUJINCLIENT_API is used for the public API symbols. It either DLL imports or DLL exports (or does nothing for static build)
// TESTMUJINCLIENT_LOCAL is used for non-api symbols.
#if defined(TESTMUJINCLIENT_DLL) || defined(TESTMUJINCLIENT_CORE_DLL) // defined if OpenRAVE is compiled as a DLL
  #ifdef TESTMUJINCLIENT_DLL_EXPORTS // defined if we are building the OpenRAVE DLL (instead of using it)
    #define TESTMUJINCLIENT_API TESTMUJINCLIENT_HELPER_DLL_EXPORT
  #else
    #define TESTMUJINCLIENT_API TESTMUJINCLIENT_HELPER_DLL_IMPORT
  #endif // TESTMUJINCLIENT_DLL_EXPORTS
  #define TESTMUJINCLIENT_LOCAL TESTMUJINCLIENT_HELPER_DLL_LOCAL
#else // TESTMUJINCLIENT_DLL is not defined: this means OpenRAVE is a static lib.
  #define TESTMUJINCLIENT_API
  #define TESTMUJINCLIENT_LOCAL
#endif // TESTMUJINCLIENT_DLL

#define TESTMUJINCLIENT_VERSION_MAJOR @TESTMUJINCLIENT_VERSION_MAJOR@
#define TESTMUJINCLIENT_VERSION_MINOR @TESTMUJINCLIENT_VERSION_MINOR@
#define TESTMUJINCLIENT_VERSION_PATCH @TESTMUJINCLIENT_VERSION_PATCH@
#define TESTMUJINCLIENT_VERSION_COMBINED(major, minor, patch) (((major) << 16) | ((minor) << 8) | (patch))
#define TESTMUJINCLIENT_VERSION TESTMUJINCLIENT_VERSION_COMBINED(TESTMUJINCLIENT_VERSION_MAJOR, TESTMUJINCLIENT_VERSION_MINOR, TESTMUJINCLIENT_VERSION_PATCH)
#define TESTMUJINCLIENT_VERSION_EXTRACT_MAJOR(version) (((version)>>16)&0xff)
#define TESTMUJINCLIENT_VERSION_EXTRACT_MINOR(version) (((version)>>8)&0xff)
#define TESTMUJINCLIENT_VERSION_EXTRACT_PATCH(version) (((version))&0xff)
#define TESTMUJINCLIENT_VERSION_STRING "@TESTMUJINCLIENT_VERSION_MAJOR@.@TESTMUJINCLIENT_VERSION_MINOR@.@TESTMUJINCLIENT_VERSION_PATCH@"
#define TESTMUJINCLIENT_VERSION_STRING_FORMAT(version) boost::str(boost::format("%s.%s.%s")%(TESTMUJINCLIENT_VERSION_EXTRACT_MAJOR(version))%(TESTMUJINCLIENT_VERSION_EXTRACT_MINOR(version))%(TESTMUJINCLIENT_VERSION_EXTRACT_PATCH(version)))

#define TESTMUJINCLIENT_VERSION_GE(major1, minor1, patch1, major2, minor2, patch2) (TESTMUJINCLIENT_VERSION_COMBINED(major1, minor1, patch1) >= TESTMUJINCLIENT_VERSION_COMBINED(major2, minor2, patch2))
#define TESTMUJINCLIENT_VERSION_MINIMUM(major, minor, patch) TESTMUJINCLIENT_VERSION_GE(TESTMUJINCLIENT_VERSION_MAJOR, TESTMUJINCLIENT_VERSION_MINOR, TESTMUJINCLIENT_VERSION_PATCH, major, minor, patch)

// whether log4cxx is to be used
#define TESTMUJINCLIENT_LOG4CXX @TESTMUJINCLIENT_LOG4CXX@
#define MUJIN_USEZMQ @MUJIN_USEZMQ@

#endif
